import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

plugins {
    id "io.ratpack.ratpack-groovy" version "1.5.4"
}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

def mainOutputs

kotlin {
    targets {
        fromPreset(presets.jvm, 'backend') {
            mainOutputs = compilations.main.output
        }
        fromPreset(presets.js, 'frontend') {
            [tasks.getByName(compilations.main.compileKotlinTaskName), tasks.getByName(compilations.test.compileKotlinTaskName)]*.kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "umd"
                sourceMap = true
                metaInfo = true
            }
        }
    }
    sourceSets {
        backendMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "io.ktor:ktor-server-core:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "org.jetbrains:kotlin-css-jvm:1.0.0-pre.31-kotlin-1.2.41"
                implementation "io.ktor:ktor-server-host-common:$ktor_version"
                implementation "io.ktor:ktor-locations:$ktor_version"
                implementation "io.ktor:ktor-server-sessions:$ktor_version"
                implementation "io.ktor:ktor-auth:$ktor_version"
                implementation "org.apache.commons:commons-lang3:3.0"
                implementation "com.github.jkcclemens:khttp:-SNAPSHOT"
                implementation "org.postgresql:postgresql:42.2.2"
                implementation 'org.jetbrains.exposed:exposed:0.11.2'
                implementation "com.amazonaws:aws-java-sdk:1.11.163"
                implementation "com.beust:klaxon:3.0.1"
                implementation "com.github.h0tk3y.betterParse:better-parse-jvm:0.4.0-alpha-3"
            }
        }
        backendTest {
            dependencies {
                implementation "io.ktor:ktor-server-tests:$ktor_version"
            }
        }
        frontendMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-html-js:0.6.12"
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
            }
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
    maven { url "http://dl.bintray.com/kotlin/kotlinx.html/"}
    maven { url "https://dl.bintray.com/hotkeytlt/maven" }
}


group 'cookbook'
version '0.0.1'
mainClassName = "com.zypus.ApplicationKt"
//mainClassName = "io.ktor.server.netty.EngineMain"
//
//sourceSets {
//    main.kotlin.srcDirs = main.java.srcDirs = ['src/backendMain/kotlin']
//    test.kotlin.srcDirs = test.java.srcDirs = ['test']
//    main.resources.srcDirs = ['src/backendMain/resources']
//    test.resources.srcDirs = ['testresources']
//}


def webFolder = new File(project.buildDir, "../web")
def frontendCompilations = kotlin.targets.frontend.compilations

task populateWebFolder(dependsOn: [frontendMainClasses]) {
    delete "web"
    doLast {
        copy {
            from frontendCompilations.main.output
            from kotlin.sourceSets.frontendMain.resources.srcDirs
            frontendCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into webFolder
        }
    }
}

frontendJar.dependsOn(populateWebFolder)

task shadowJarBackend(type: ShadowJar) {
    dependsOn populateWebFolder
    def target = kotlin.targets.backend
    from target.compilations.main.output
    def runtimeClasspath = target.compilations.main.runtimeDependencyFiles
    configurations = [runtimeClasspath]

    manifest {
        attributes("Main-Class": "$mainClassName")
    }
}

task runBackend(type: JavaExec, dependsOn: [backendMainClasses, frontendJar]) {
    main = "io.ktor.server.netty.EngineMain"
    classpath {
        [
                kotlin.targets.backend.compilations.main.output,
                configurations.backendRuntimeClasspath,
        ]
    }
    args = []
}

// Heroku integration
task stage(type: Copy) {
    dependsOn populateWebFolder
    dependsOn installDist
//    copy {
//        from("src/frontendMain/web")
//        into("build/install/cookbook/app/static")
//    }
}